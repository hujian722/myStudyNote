/*
Using []byte as a map key
It is very common to use a string as a map key, but often you have a []byte.

The compiler implements a specific optimisation for this case

var m map[string]string
v, ok := m[string(bytes)]
This will avoid the conversion of the byte slice to a string for the map lookup. This is very specific, it won't work if you do something like

key := string(bytes)
val, ok := m[key]

经下面测试 使用v, ok := m[string(bytes)]性能更高
*/
/*
Reduce allocations 减少内存分配
Make sure your APIs allow the caller to reduce the amount of garbage generated.
Consider these two Read methods
 func (r *Reader) Read() ([]byte, error)
 func (r *Reader) Read(buf []byte) (int, error)
The Òrst Read method takes no arguments and returns some data as a []byte. The second
takes a []byte bu×er and returns the amount of bytes read.
The Òrst Read method will always allocate a bu×er, putting pressure on the GC. The second
Òlls the bu×er it was given.
*/

func main() {
	a := []int{1, 2, 3, 4, 5, 6, 99}
	for i, v := range a {
		fmt.Println(i, v)
	}
	for j := range a {  //此种要快些
		fmt.Println(j)
	}
}
//输出数组slice地址
var fruitslice=[]int{1,2,3}
fmt.Printf("%p \n", fruitslice)
fmt.Printf("%p \n", &fruitslice[0])


type A struct{
}
var a A
var a *A  //0x0
func F()(out *A){//0x0
	
}
